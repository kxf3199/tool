#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('long-pipe-tool:server');
var http = require('http');
var data_manage=require('../public/javascripts/data-manage');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Create socket
var io=require('socket.io')(server);
//socket.io listen
io.on('connection',function(socket){
    socket.emit('open');  //通知客户端已连接
     
    //构造客户端对象
    var client={
        socket:socket,
        name:false
    };

    socket.on('get-welddata',function(msg){
        data_manage.get_weld_info(socket,function(err,rs){
            if(err)
              console.log("获取焊缝数据出错！");
        });
    });

    socket.on('message',function(msg){
        if(msg){
          msg="我已经收到了你的消息"+msg;
          socket.emit('message',msg);
        }
    });
    

 /*()
    socket.on('disconnect',function(){
        onlineUserCount--;
 
        if(onlineUsers.hasOwnProperty(socket.name)){
            delete onlineUsers[client.name];
        }
 
        var obj={
            time:getTime(),
            author:'Sys',
            text:client.name,
            type:'disconnect',
            onlineUserCount:onlineUserCount,
            onlineUsers:onlineUsers
        };
 
        //广播用户退出
        socket.broadcast.emit('system',obj); //用户登录和退出都使用system事件播报
        console.log(client.name+' disconnect,当前在线人数:'+onlineUserCount);
    });
 */
     
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
